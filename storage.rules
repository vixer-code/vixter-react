rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // =====================================================
    // HELPER FUNCTIONS
    // =====================================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Check if user is the file owner
    function isOwner(userId) {
      return request.auth != null && 
             request.auth.uid != null && 
             userId != null &&
             request.auth.uid == userId;
    }
    
    // Check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.uid != null &&
             request.auth.uid in ['admin_uid_1', 'admin_uid_2']; // Replace with actual admin UIDs
    }
    
    // Validate image file types (use request.resource for writes)
    function isImageFile() {
      return request.resource != null && 
             request.resource.contentType != null &&
             request.resource.contentType.matches('image/.*');
    }
    
    // Validate video file types (use request.resource for writes)
    function isVideoFile() {
      return request.resource != null && 
             request.resource.contentType != null &&
             request.resource.contentType.matches('video/.*');
    }
    
    // Validate file size (max 100MB) for writes
    function isValidFileSize() {
      return request.resource != null && 
             request.resource.size != null &&
             request.resource.size <= 100 * 1024 * 1024;
    }
    
    // Validate profile image size (max 10MB) for writes
    function isValidProfileImageSize() {
      return request.resource != null && 
             request.resource.size != null &&
             request.resource.size <= 10 * 1024 * 1024;
    }
    
    // =====================================================
    // PROFILE IMAGES
    // =====================================================
    
    match /profile-images/{userId}/{fileName} {
      // Users can read any profile image (public)
      allow read: if true;
      
      // Users can only upload/update their own profile images
      allow write: if isAuthenticated() && 
                     isOwner(userId) && 
                     isImageFile() && 
                     isValidProfileImageSize();
      
      // Users can delete their own profile images
      allow delete: if isAuthenticated() && isOwner(userId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }

    // Backward compatibility for current client uploads
    match /profilePictures/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && 
                     isOwner(userId) && 
                     isImageFile() && 
                     isValidProfileImageSize();
      allow delete: if isAuthenticated() && isOwner(userId);
      allow read, write, delete: if isAdmin();
    }

    match /coverPhotos/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && 
                     isOwner(userId) && 
                     isImageFile() && 
                     isValidFileSize();
      allow delete: if isAuthenticated() && isOwner(userId);
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // PACK IMAGES
    // =====================================================
    
    match /pack-images/{creatorId}/{packId}/{fileName} {
      // Anyone can read pack images (public content)
      allow read: if true;
      
      // Only pack creators can upload pack images
      allow write: if isAuthenticated() && 
                     isOwner(creatorId) && 
                     isImageFile() && 
                     isValidFileSize();
      
      // Only pack creators can delete their pack images
      allow delete: if isAuthenticated() && isOwner(creatorId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // SERVICE IMAGES
    // =====================================================
    
    match /service-images/{creatorId}/{serviceId}/{fileName} {
      // Anyone can read service images (public content)
      allow read: if true;
      
      // Only service creators can upload service images
      allow write: if isAuthenticated() && 
                     isOwner(creatorId) && 
                     isImageFile() && 
                     isValidFileSize();
      
      // Only service creators can delete their service images
      allow delete: if isAuthenticated() && isOwner(creatorId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }

    // Service media with watermark protection
    match /servicesMedia/{creatorId}/{serviceId}/{fileName} {
      // Allow reading only watermarked files (wm_ or buyerwm_ prefix) or files marked as watermarked
      allow read: if fileName.matches('(wm_|buyerwm_).*') || 
                     (resource != null && resource.metadata != null && resource.metadata.watermarked == 'true');
      
      // Allow uploading only by owner
      allow write: if isAuthenticated() && isOwner(creatorId) && (isImageFile() || isVideoFile()) && isValidFileSize();
      
      // Allow deletion only by owner
      allow delete: if isAuthenticated() && isOwner(creatorId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // POST MEDIA (Images & Videos)
    // =====================================================
    
    match /post-media/{authorId}/{postId}/{fileName} {
      // Anyone can read post media (public content)
      allow read: if true;
      
      // Only post authors can upload media for their posts
      allow write: if isAuthenticated() && 
                     isOwner(authorId) && 
                     (isImageFile() || isVideoFile()) && 
                     isValidFileSize();
      
      // Only post authors can delete their post media
      allow delete: if isAuthenticated() && isOwner(authorId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }

    // Backward compatibility for current posts upload path
    match /posts/{authorId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(authorId) && (isImageFile() || isVideoFile()) && isValidFileSize();
      allow delete: if isAuthenticated() && isOwner(authorId);
      allow read, write, delete: if isAdmin();
    }

    // Vixies posts media - only providers can upload
    match /vixies/{authorId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(authorId);
      allow delete: if isAuthenticated() && isOwner(authorId);
      allow read, write, delete: if isAdmin();
    }

    // Vixink posts media
    match /vixink/{authorId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(authorId);
      allow delete: if isAuthenticated() && isOwner(authorId);
      allow read, write, delete: if isAdmin();
    }

    // Feed posts media
    match /feed/{authorId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(authorId) && (isImageFile() || isVideoFile()) && isValidFileSize();
      allow delete: if isAuthenticated() && isOwner(authorId);
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // MESSAGE MEDIA FILES
    // =====================================================
    
    match /messages/{type}/{conversationId}/{fileName} {
      // Users can read if they are participants in the conversation
      allow read: if isAuthenticated() && 
                    isParticipantInConversation(request.auth.uid, conversationId);
      
      // Users can upload if they are participants and it's their file
      allow write: if isAuthenticated() && 
                     isParticipantInConversation(request.auth.uid, conversationId) &&
                     isValidMediaFile(type, request.resource.size, request.resource.contentType) &&
                     fileName.matches('.*_' + request.auth.uid + '\\.(jpg|jpeg|png|gif|webp|mp4|mov|avi|webm|mp3|wav|ogg|webm|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|zip|rar|7z)$');
      
      // Users can delete their own files
      allow delete: if isAuthenticated() &&
                      isParticipantInConversation(request.auth.uid, conversationId) &&
                      fileName.matches('.*_' + request.auth.uid + '\\.(jpg|jpeg|png|gif|webp|mp4|mov|avi|webm|mp3|wav|ogg|webm|pdf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|zip|rar|7z)$');
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // Helper function to check conversation participation
    function isParticipantInConversation(userId, conversationId) {
      // For now, allow access - in production you'd want to validate against RTDB
      // This would require additional setup to check Firebase RTDB from Storage rules
      return true;
    }
    
    // Helper function to validate media files by type
    function isValidMediaFile(type, size, contentType) {
      return size < 50 * 1024 * 1024 && // Max 50MB
             (
               (type == 'image' && contentType.matches('image/(jpeg|jpg|png|gif|webp)')) ||
               (type == 'video' && contentType.matches('video/(mp4|mov|avi|webm)')) ||
               (type == 'audio' && contentType.matches('audio/(mpeg|wav|ogg|mp3|webm)')) ||
               (type == 'file' && (
                 contentType.matches('application/(pdf|msword|vnd\\.openxmlformats-officedocument\\..*|vnd\\.ms-.*|zip|x-rar-compressed|x-7z-compressed)') ||
                 contentType.matches('text/(plain|csv)') ||
                 contentType.matches('image/(jpeg|jpg|png|gif|webp)') ||
                 contentType.matches('audio/(mpeg|wav|ogg|mp3)')
               ))
             );
    }

    // Packs with watermark protection
    match /packs/{creatorId}/{packId}/{allPaths=**} {
      // Allow reading only watermarked files (wm_ or buyerwm_ prefix) or files marked as watermarked
      allow read: if allPaths.matches('.*(wm_|buyerwm_).*') || 
                     (resource != null && resource.metadata != null && resource.metadata.watermarked == 'true');
      
      // Allow uploading only by owner
      allow write: if isAuthenticated() && isOwner(creatorId) && (isImageFile() || isVideoFile()) && isValidFileSize();
      
      // Allow deletion only by owner
      allow delete: if isAuthenticated() && isOwner(creatorId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // SERVICE DELIVERABLES
    // =====================================================
    
    match /service-deliverables/{sellerId}/{orderId}/{fileName} {
      // Only buyer and seller can access service deliverables
      allow read: if isAuthenticated() && 
                    (isOwner(sellerId) ||
                     // Additional logic needed to verify buyer access
                     // This would require a database lookup
                     true);
      
      // Only service sellers can upload deliverables
      allow write: if isAuthenticated() && 
                     isOwner(sellerId) && 
                     isValidFileSize();
      
      // Only service sellers can delete their deliverables
      allow delete: if isAuthenticated() && isOwner(sellerId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // TEMPORARY UPLOADS
    // =====================================================
    
    match /temp-uploads/{userId}/{fileName} {
      // Users can only access their own temporary files
      allow read, write, delete: if isAuthenticated() && isOwner(userId);
      
      // Admin access
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // WALLET RELATED FILES (Receipts, etc.)
    // =====================================================
    
    match /wallet-documents/{userId}/{fileName} {
      // Users can only access their own wallet documents
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Users can delete their own wallet documents
      allow delete: if isAuthenticated() && isOwner(userId);
      
      // Admin access for support and verification
      allow read, write, delete: if isAdmin();
    }
    
    // =====================================================
    // PUBLIC ASSETS (Logos, etc.)
    // =====================================================
    
    match /public-assets/{fileName} {
      // Anyone can read public assets
      allow read: if true;
      
      // Only admins can manage public assets
      allow write, delete: if isAdmin();
    }
    
    // =====================================================
    // DEFAULT DENY RULE
    // =====================================================
    
    // Deny all other operations by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
