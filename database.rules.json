{
  "rules": {
    "conversations": {
      "$conversationId": {
        ".read": "auth != null && data.child('participants').child(auth.uid).exists()",
        ".write": "auth != null && (data.child('participants').child(auth.uid).exists() || newData.child('participants').child(auth.uid).exists())",
        "participants": {
          "$userId": {
            ".validate": "$userId == auth.uid || data.parent().child(auth.uid).exists()"
          }
        },
        "lastMessage": {
          ".validate": "newData.isString() && newData.val().length <= 500"
        },
        "lastMessageTime": {
          ".validate": "newData.isNumber()"
        },
        "lastSenderId": {
          ".validate": "newData.isString()"
        },
        "type": {
          ".validate": "newData.isString() && (newData.val() == 'regular' || newData.val() == 'service')"
        },
        "serviceOrderId": {
          ".validate": "newData.isString() && data.parent().child('type').val() == 'service'"
        },
        "createdAt": {
          ".validate": "newData.isNumber()"
        }
      }
    },
    "messages": {
      "$conversationId": {
        ".read": "auth != null && root.child('conversations').child($conversationId).child('participants').child(auth.uid).exists()",
        ".write": "auth != null && root.child('conversations').child($conversationId).child('participants').child(auth.uid).exists()",
        "$messageId": {
          ".validate": "newData.hasChildren(['senderId', 'type', 'content', 'timestamp']) && (newData.child('senderId').val() == auth.uid || newData.child('senderId').val() == 'system')",
          "senderId": {
            ".validate": "newData.isString() && (newData.val() == auth.uid || newData.val() == 'system')"
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() == 'text' || newData.val() == 'image' || newData.val() == 'video' || newData.val() == 'audio' || newData.val() == 'file' || newData.val() == 'service_notification')"
          },
          "content": {
            ".validate": "newData.isString() && newData.val().length <= 2000"
          },
          "mediaUrl": {
            ".validate": "newData.isString()"
          },
          "mediaInfo": {
            "name": {
              ".validate": "newData.isString()"
            },
            "size": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "type": {
              ".validate": "newData.isString()"
            },
            "storagePath": {
              ".validate": "newData.isString()"
            }
          },
          "serviceOrderData": {
            "id": {
              ".validate": "newData.isString()"
            },
            "serviceName": {
              ".validate": "newData.isString()"
            },
            "buyerId": {
              ".validate": "newData.isString()"
            },
            "sellerId": {
              ".validate": "newData.isString()"
            },
            "vpAmount": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "status": {
              ".validate": "newData.isString()"
            },
            "additionalFeatures": {
              ".validate": "newData.hasChildren()"
            }
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now + 300000"
          },
          "read": {
            ".validate": "newData.isBoolean()"
          },
          "readAt": {
            ".validate": "newData.isNumber()"
          },
          "readBy": {
            ".validate": "newData.isString()"
          },
          "replyTo": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    "users": {
      "$userId": {
        ".read": "auth != null",
        ".write": "$userId == auth.uid",
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)"
        },
        "displayName": {
          ".validate": "newData.isString()"
        },
        "photoURL": {
          ".validate": "newData.isString()"
        },
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'online' || newData.val() == 'offline')"
        },
        "lastSeen": {
          ".validate": "newData.isNumber()"
        },
        "createdAt": {
          ".validate": "newData.isNumber()"
        },
        "profileComplete": {
          ".validate": "newData.isBoolean()"
        }
      }
    }
  }
}
